#pragma once
#include <vector>
#include <string>
#include <set>
#include <map>
//#include <iosfwd>
using std::string;
using std::vector;
using std::map;
using std::set;

//typedef int Piece; //Piece now more robust
//typedef std::vector<int> PresentPieces;
typedef std::vector<int> PlayField;
//typedef std::vector<std::vector<bool>> PlayFieldFilled; //standard is col(row(mino)) //TODO: depreciating...

//struct FuSol { //fumen + solutions (pieces in order)
//	string Fumen = "";
//	vector<PresentPieces> Solves = {};
//};
//
//struct PFFSol { //playfieldfilled + solutions (pieces in order)
//	PlayFieldFilled PFFilled;
//	vector<PresentPieces> Solves = {};
//};
//
//struct StrSol { //general struct, encompassing both structs
//	string Str = "";
//	vector<PresentPieces> Solves = {};
//
//	StrSol() {};
//	StrSol(const FuSol& FSol) : Str(FSol.Fumen), Solves(FSol.Solves) {};
//};
//
//struct StrFieldStrPiece { //even more general, pieces are not converted to nested array of integers immediately
//	string Field;
//	vector<string> Solves = {};
//};

//struct CommonFieldTree {
//	Piece UsedPiece;
//	double SolvePercent;
//	vector<std::pair<string, vector<CommonFieldTree>>> childNodes; //unordered_set<CommonFieldTree> possible?
//};

//char ReturnTetromino(int Index);

set<int> Range(int a, int b);

const map<char, set<int>> TetrominoDict = {
    { 'I', Range(0,37 + 1) },
    { 'L', Range(38, 121 + 1) },
    { 'J', Range(122,205 + 1) },
    { 'O', Range(206,232 + 1) },
    { 'S', Range(233,274 + 1) },
    { 'T', Range(275,358 + 1) },
    { 'Z', Range(359,400 + 1) },
};

//const map<int, int> MirrorMap = {
//    {  0,  6},
//    {  1,  5},
//    {  2,  4},
//    {  3,  3},
//    {  4,  2},
//    {  5,  1},
//    {  6,  0},
//    {  7, 13},
//    {  8, 12},
//    {  9, 11},
//    { 10, 10},
//    { 11,  9},
//    { 12,  8},
//    { 13,  7},
//    { 14, 20},
//    { 15, 19},
//    { 16, 18},
//    { 17, 17},
//    { 18, 16},
//    { 19, 15},
//    { 20, 14},
//    { 21, 27},
//    { 22, 26},
//    { 23, 25},
//    { 24, 24},
//    { 25, 23},
//    { 26, 22},
//    { 27, 21},
//    { 28, 37},
//    { 29, 36},
//    { 30, 35},
//    { 31, 34},
//    { 32, 33},
//    { 33, 32},
//    { 34, 31},
//    { 35, 30},
//    { 36, 29},
//    { 37, 28},
//    { 38,129},
//    { 39,128},
//    { 40,127},
//    { 41,126},
//    { 42,125},
//    { 43,124},
//    { 44,123},
//    { 45,122},
//    { 46,137},
//    { 47,136},
//    { 48,135},
//    { 49,134},
//    { 50,133},
//    { 51,132},
//    { 52,131},
//    { 53,130},
//    { 54,145},
//    { 55,144},
//    { 56,143},
//    { 57,142},
//    { 58,141},
//    { 59,140},
//    { 60,139},
//    { 61,138},
//    { 62,196},
//    { 63,195},
//    { 64,194},
//    { 65,193},
//    { 66,192},
//    { 67,191},
//    { 68,190},
//    { 69,189},
//    { 70,188},
//    { 71,205},
//    { 72,204},
//    { 73,203},
//    { 74,202},
//    { 75,201},
//    { 76,200},
//    { 77,199},
//    { 78,198},
//    { 79,197},
//    { 80,171},
//    { 81,170},
//    { 82,169},
//    { 83,168},
//    { 84,167},
//    { 85,166},
//    { 86,165},
//    { 87,164},
//    { 88,179},
//    { 89,178},
//    { 90,177},
//    { 91,176},
//    { 92,175},
//    { 93,174},
//    { 94,173},
//    { 95,172},
//    { 96,187},
//    { 97,186},
//    { 98,185},
//    { 99,184},
//    {100,183},
//    {101,182},
//    {102,181},
//    {103,180},
//    {104,154},
//    {105,153},
//    {106,152},
//    {107,151},
//    {108,150},
//    {109,149},
//    {110,148},
//    {111,147},
//    {112,146},
//    {113,163},
//    {114,162},
//    {115,161},
//    {116,160},
//    {117,159},
//    {118,158},
//    {119,157},
//    {120,156},
//    {121,155},
//    {122, 45},
//    {123, 44},
//    {124, 43},
//    {125, 42},
//    {126, 41},
//    {127, 40},
//    {128, 39},
//    {129, 38},
//    {130, 53},
//    {131, 52},
//    {132, 51},
//    {133, 50},
//    {134, 49},
//    {135, 48},
//    {136, 47},
//    {137, 46},
//    {138, 61},
//    {139, 60},
//    {140, 59},
//    {141, 58},
//    {142, 57},
//    {143, 56},
//    {144, 55},
//    {145, 54},
//    {146,112},
//    {147,111},
//    {148,110},
//    {149,109},
//    {150,108},
//    {151,107},
//    {152,106},
//    {153,105},
//    {154,104},
//    {155,121},
//    {156,120},
//    {157,119},
//    {158,118},
//    {159,117},
//    {160,116},
//    {161,115},
//    {162,114},
//    {163,113},
//    {164, 87},
//    {165, 86},
//    {166, 85},
//    {167, 84},
//    {168, 83},
//    {169, 82},
//    {170, 81},
//    {171, 80},
//    {172, 95},
//    {173, 94},
//    {174, 93},
//    {175, 92},
//    {176, 91},
//    {177, 90},
//    {178, 89},
//    {179, 88},
//    {180,103},
//    {181,102},
//    {182,101},
//    {183,100},
//    {184, 99},
//    {185, 98},
//    {186, 97},
//    {187, 96},
//    {188, 70},
//    {189, 69},
//    {190, 68},
//    {191, 67},
//    {192, 66},
//    {193, 65},
//    {194, 64},
//    {195, 63},
//    {196, 62},
//    {197, 79},
//    {198, 78},
//    {199, 77},
//    {200, 76},
//    {201, 75},
//    {202, 74},
//    {203, 73},
//    {204, 72},
//    {205, 71},
//    {206,214},
//    {207,213},
//    {208,212},
//    {209,211},
//    {210,210},
//    {211,209},
//    {212,208},
//    {213,207},
//    {214,206},
//    {215,223},
//    {216,222},
//    {217,221},
//    {218,220},
//    {219,219},
//    {220,218},
//    {221,217},
//    {222,216},
//    {223,215},
//    {224,232},
//    {225,231},
//    {226,230},
//    {227,229},
//    {228,228},
//    {229,227},
//    {230,226},
//    {231,225},
//    {232,224},
//    {233,366},
//    {234,365},
//    {235,364},
//    {236,363},
//    {237,362},
//    {238,361},
//    {239,360},
//    {240,359},
//    {241,374},
//    {242,373},
//    {243,372},
//    {244,371},
//    {245,370},
//    {246,369},
//    {247,368},
//    {248,367},
//    {249,382},
//    {250,381},
//    {251,380},
//    {252,379},
//    {253,378},
//    {254,377},
//    {255,376},
//    {256,375},
//    {257,391},
//    {258,390},
//    {259,389},
//    {260,388},
//    {261,387},
//    {262,386},
//    {263,385},
//    {264,384},
//    {265,383},
//    {266,400},
//    {267,399},
//    {268,398},
//    {269,397},
//    {270,396},
//    {271,395},
//    {272,394},
//    {273,393},
//    {274,392},
//    {275,282},
//    {276,281},
//    {277,280},
//    {278,279},
//    {279,278},
//    {280,277},
//    {281,276},
//    {282,275},
//    {283,290},
//    {284,289},
//    {285,288},
//    {286,287},
//    {287,286},
//    {288,285},
//    {289,284},
//    {290,283},
//    {291,298},
//    {292,297},
//    {293,296},
//    {294,295},
//    {295,294},
//    {296,293},
//    {297,292},
//    {298,291},
//    {299,349},
//    {300,348},
//    {301,347},
//    {302,346},
//    {303,345},
//    {304,344},
//    {305,343},
//    {306,342},
//    {307,341},
//    {308,358},
//    {309,357},
//    {310,356},
//    {311,355},
//    {312,354},
//    {313,353},
//    {314,352},
//    {315,351},
//    {316,350},
//    {317,324},
//    {318,323},
//    {319,322},
//    {320,321},
//    {321,320},
//    {322,319},
//    {323,318},
//    {324,317},
//    {325,332},
//    {326,331},
//    {327,330},
//    {328,329},
//    {329,328},
//    {330,327},
//    {331,326},
//    {332,325},
//    {333,340},
//    {334,339},
//    {335,338},
//    {336,337},
//    {337,336},
//    {338,335},
//    {339,334},
//    {340,333},
//    {341,307},
//    {342,306},
//    {343,305},
//    {344,304},
//    {345,303},
//    {346,302},
//    {347,301},
//    {348,300},
//    {349,299},
//    {350,316},
//    {351,315},
//    {352,314},
//    {353,313},
//    {354,312},
//    {355,311},
//    {356,310},
//    {357,309},
//    {358,308},
//    {359,240},
//    {360,239},
//    {361,238},
//    {362,237},
//    {363,236},
//    {364,235},
//    {365,234},
//    {366,233},
//    {367,248},
//    {368,247},
//    {369,246},
//    {370,245},
//    {371,244},
//    {372,243},
//    {373,242},
//    {374,241},
//    {375,256},
//    {376,255},
//    {377,254},
//    {378,253},
//    {379,252},
//    {380,251},
//    {381,250},
//    {382,249},
//    {383,265},
//    {384,264},
//    {385,263},
//    {386,262},
//    {387,261},
//    {388,260},
//    {389,259},
//    {390,258},
//    {391,257},
//    {392,274},
//    {393,273},
//    {394,272},
//    {395,271},
//    {396,270},
//    {397,269},
//    {398,268},
//    {399,267},
//    {400,266},
//};

//const map<char, int> FumenIndex = {
//    { 'I', 1 },
//    { 'L', 2 },
//    { 'J', 6 },
//    { 'O', 3 },
//    { 'S', 7 },
//    { 'T', 5 },
//    { 'Z', 4 },
//};

vector<vector<string>> ReadCSV(std::ifstream& FileStream);

//string PercentageMapToString(map<string, double> PercentageMap);

//double RoundToDP(double x, int DecimalPlaces);